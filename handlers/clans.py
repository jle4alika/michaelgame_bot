import asyncio
import random

from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.chat_types import ChatTypeFilter
from handlers.states import Clan, Clan_add
import database.requests.get as get
import database.requests.add as add
import database.requests.minus as minus
import database.requests.others as set
import keyboards.inline as kb
from aiogram.enums import ParseMode

router = Router()
router.message.filter(ChatTypeFilter(['private']))
async def owner_main_kb(tg_id: int):
    if tg_id == await get.get_clan_owner(tg_id):
        return kb.clan_owner
    else:
        return kb.clan_main

@router.message(F.text == '–ö–ª–∞–Ω—ã üõ°Ô∏è')
async def clans(message: Message):
    if await get.get_user_clan(message.from_user.id) != 0 and int(str(await get.get_user_clan(message.from_user.id))[:6]) != 892352:
        type = await get.get_clan_type(message.from_user.id)
        if type == 0:
            type = 'OPEN'
        else:
            type = 'PRIVATE'
        if await get.get_clan_photo(message.from_user.id) == '':
            name = await get.get_clan_name(message.from_user.id)
            money = await get.get_clan_money(message.from_user.id)
            count = await get.get_clan_members(message.from_user.id)
            users_money = await get.get_clan_users_money(message.from_user.id)
            money_chance = await get.get_clan_money_chance(message.from_user.id)
            boost_chance = await get.get_clan_boost_chance(message.from_user.id)
            code = await get.get_clan_code(message.from_user.id)
            await message.answer_photo(
                photo='AgACAgIAAxkBAAJgPWaP6DS_Mee7DI9CGYUGd-RHHqY2AALP3jEbNceASMYNm_KYutUrAQADAgADeQADNQQ',
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                        f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                        f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                        f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n'
                        f'–í–∞—à —Ç–∏–ø –∫–ª–∞–Ω–∞ - {type}\n'
                        f'–ö–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {code}',
                reply_markup=await owner_main_kb(message.from_user.id))
        else:
            name = await get.get_clan_name(message.from_user.id)
            photo = await get.get_clan_photo(message.from_user.id)
            money = await get.get_clan_money(message.from_user.id)
            count = await get.get_clan_members(message.from_user.id)
            users_money = await get.get_clan_users_money(message.from_user.id)
            money_chance = await get.get_clan_money_chance(message.from_user.id)
            boost_chance = await get.get_clan_boost_chance(message.from_user.id)
            code = await get.get_clan_code(message.from_user.id)
            await message.answer_photo(
                photo=f'{photo}',
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                        f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                        f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                        f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n'
                        f'–í–∞—à —Ç–∏–ø –∫–ª–∞–Ω–∞ - {type}\n'
                        f'–ö–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {code}',
                reply_markup=await owner_main_kb(message.from_user.id))
    else:
        await message.answer_photo(photo='AgACAgIAAxkBAAJgPWaP6DS_Mee7DI9CGYUGd-RHHqY2AALP3jEbNceASMYNm_KYutUrAQADAgADeQADNQQ',
                                   caption='<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>\n'  
                                '–ö–ª–∞–Ω—ã ‚Äì —ç—Ç–æ –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±—â–µ–π —Ü–µ–ª—å—é –∏\n'
                              ' –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –í—Å—Ç—É–ø–∏–≤ –≤ –∫–ª–∞–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º\n'
                              ' –∫–ª–∞–Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏—è–º, —á–∞—Ç–∞–º –∏ —Å–æ–±—ã—Ç–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º\n'
                              ' –ø–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–æ–Ω—É—Å—ã.\n\n'

                                '‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏—è –≤ –∫–ª–∞–Ω–µ:</b>\n'
                                '- –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n'
                                '- –û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Å–æ–≤–µ—Ç—ã –æ—Ç –±–æ–ª–µ–µ –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.\n'
                                '- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö –∏ –∑–∞–≤–æ–µ–≤—ã–≤–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.\n'
                                '- –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–∞—Ñ—Ñ—ã (—É—Å–∏–ª–µ–Ω–∏—è).\n\n'

                                'üìú <b>–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω:</b>\n'
                                '1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª–∞–Ω".\n'
                                '2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.\n'
                                '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ª–∏–¥–µ—Ä–æ–º\n'
                                '–∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n\n'

                                'üåü <b>–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∫–ª–∞–Ω:</b>\n'
                                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞–Ω –∏ —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω. –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n'
                                '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –¥—Ä—É–∂–Ω–æ–π –∏ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã! üåü',
                                   reply_markup=kb.clan_start,
                                   parse_mode=ParseMode.HTML)

@router.callback_query(F.data == '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω')
async def clan_create(callback: CallbackQuery, state: FSMContext):
    # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä
    await set.set_clan(callback.from_user.id)
    await add.add_clan_name(callback.from_user.id, str(callback.from_user.username))
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞:')
    await state.set_state(Clan.name)

@router.callback_query(F.data == '–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω')
async def clan_del(callback: CallbackQuery):
    if callback.from_user.id == await get.get_clan_owner(callback.from_user.id):
        if await get.get_clan_photo(callback.from_user.id) == '':
            name = await get.get_clan_name(callback.from_user.id)
            money = await get.get_clan_money(callback.from_user.id)
            count = await get.get_clan_members(callback.from_user.id)
            users_money = await get.get_clan_users_money(callback.from_user.id)
            money_chance = await get.get_clan_money_chance(callback.from_user.id)
            boost_chance = await get.get_clan_boost_chance(callback.from_user.id)
            await callback.message.edit_caption(
                                    caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                                    f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                                    f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                                    f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n\n'
                                    '–í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –£–î–ê–õ–ò–¢–¨ –ö–õ–ê–ù?',
                                    reply_markup=kb.clan_delete)
        else:
            name = await get.get_clan_name(callback.from_user.id)
            money = await get.get_clan_money(callback.from_user.id)
            count = await get.get_clan_members(callback.from_user.id)
            users_money = await get.get_clan_users_money(callback.from_user.id)
            money_chance = await get.get_clan_money_chance(callback.from_user.id)
            boost_chance = await get.get_clan_boost_chance(callback.from_user.id)
            await callback.message.edit_caption(
                caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                        f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                        f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                        f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                        f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n\n\n\n'
                        '–í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –£–î–ê–õ–ò–¢–¨ –ö–õ–ê–ù?',
                reply_markup=kb.clan_delete)
    else:
        await callback.answer('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞.',
                              show_alert=True)

@router.callback_query(F.data == '–£–¥–∞–ª–∏—Ç—å')
async def clan_delete(callback: CallbackQuery, bot: Bot):
    name = await get.get_clan_name(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    await set.delete_clan(callback.from_user.id)
    await callback.answer('–í–∞—à –∫–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω...', show_alert=True)
    for user in users:
        await bot.send_message(chat_id=user, text=f'–ö–ª–∞–Ω {name} –±—ã–ª —É–¥–∞–ª—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.')
        await set.set_user_clan(user, 0)

@router.callback_query(F.data == '–ù–µ —É–¥–∞–ª—è—Ç—å')
async def clan_delete(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup= await owner_main_kb(callback.from_user.id))

async def del_from_clan(callback: CallbackQuery):
    all_members = await get.get_clan_name_members(callback.from_user.id)
    length = len(all_members)
    if callback.data.startswith('next_') or callback.data.startswith('back_'):
        if str(callback.data[:5]) == 'next_':
            i = int(callback.data[5:])
            i += 1
        else:
            i = int(callback.data[5:])
            i -= 1
    else:
        i = 1
    print(i)
    kb = InlineKeyboardBuilder()
    if i == 1:
        for member in all_members[:8]:
            clans = kb.add(InlineKeyboardButton(text=f'{member}', callback_data=f'nickname_{member}'))
            clans.adjust(2)
        if length / i > 8:
            next = kb.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'next_{i}'))
            next.adjust(2)
    else:
        if i * 8 >= length:
            for member in all_members[(i - 1) * 8:i * 8]:
                clans = kb.add(InlineKeyboardButton(text=f'{member}', callback_data=f'nickname_{member}'))
                clans.adjust(2)
            if length / i > 8:
                next = kb.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'next_{i}'))
                next.adjust(2)
        elif i * 8 <= length:
            if length < (i + 1) * 8:
                for member in all_members[(i - 1) * 8:length]:
                    clans = kb.add(InlineKeyboardButton(text=f'{member}', callback_data=f'nickname_{member}'))
                    clans.adjust(2)
            for member in all_members[(i - 1) * 8:length - 1]:
                clans = kb.add(InlineKeyboardButton(text=f'{member}', callback_data=f'nickname_{member}'))
                clans.adjust(2)
            if length / i > 8:
                next = kb.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'next_{i}'))
                next.adjust(2)
        back = kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_{i}'))
        back.adjust(2)

    if length == 0:
        await callback.answer('–ù–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –≤–∞—Å.', show_alert=True)
        return await owner_main_kb(callback.from_user.id)
    else:
        return clans.as_markup()


@router.callback_query(F.data == '–ò–∑–≥–Ω–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞')
async def clan_delete_from_clan(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await del_from_clan(callback))


@router.callback_query(F.data.startswith('nickname'))
async def clan_delete_from_clan(callback: CallbackQuery):
    Clan_add.nickname = str(callback.data.replace('nickname_', ''))
    delete = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–ò–∑–≥–Ω–∞—Ç—å', callback_data='–ò–∑–≥–Ω–∞—Ç—å'),
                InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='delete_back')
            ]
        ]
    )
    nickname = Clan_add.nickname
    user = await get.user_tg_id_by_nickname(nickname)
    money = await get.get_money(user)
    place = [0, 0, 0]
    a = 0
    b = 0
    c = 0
    top_alltime_money = await get.get_top_alltime_money()
    top_money = await get.get_top_money()
    top_referrals = await get.get_top_referrals()
    for item in top_alltime_money:
        a += 1
        if item == user:
            place[0] = a

    for item in top_money:
        b += 1
        if item == user:
            place[1] = b

    for item in top_referrals:
        c += 1
        if item == user:
            place[2] = c
    await callback.message.edit_caption(
        caption=f'–ò–≥—Ä–æ–∫ {nickname}\n\n'
                f'–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: <b>{money}</b> —à–∏—à–µ–∫ üå∞!\n\n'
                f'–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —à–∏—à–µ–∫ üå∞:<b>{await get.get_money_chance(user)}%</b>'
                f'\n–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ üîã:<b>{await get.get_boost_chance(user)}%</b>'
                f'\n\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[0]}</b> –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è! üí∏'
                f'\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[1]}</b> –ø–æ –¥–µ–Ω—å–≥–∞–º! üî•'
                f'\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[2]}</b> –ø–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üë®‚Äçüíº',
        reply_markup=delete, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == '–ò–∑–≥–Ω–∞—Ç—å')
async def clan_type_clan(callback: CallbackQuery, bot: Bot):
    nickname = Clan_add.nickname
    user = await get.user_tg_id_by_nickname(nickname)
    name = await get.get_clan_name(callback.from_user.id)
    await minus.minus_clan_member(user)
    await set.set_user_clan(user, 0)

    await callback.answer(f'–í—ã –∏–∑–≥–Ω–∞–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞ {nickname}...', show_alert=True)
    await bot.send_message(user, f'–í–∞—Å –∏–∑–≥–Ω–∞–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞ {name}...')
@router.callback_query(F.data == 'delete_back')
async def clan_type_clan(callback: CallbackQuery):
    await clans(callback.message)


@router.callback_query(F.data == '–¢–∏–ø –∫–ª–∞–Ω–∞')
async def clan_type_clan(callback: CallbackQuery):
    # –∑–∞–∫—Ä—ã—Ç—ã–π (–ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º) –æ—Ç–∫—Ä—ã—Ç—ã–π
    type = await get.get_clan_type(callback.from_user.id)
    if type == 0:
        type = 'OPEN'
    else:
        type = 'PRIVATE'
    await callback.message.answer(f'–í–∞—à —Ç–∏–ø –∫–ª–∞–Ω–∞ - {type}', reply_markup=kb.clan_type)

@router.callback_query(F.data == 'change_type')
async def clan_type_change(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=kb.clan_type_change)

@router.callback_query(F.data == 'private')
async def clan_type_private(callback: CallbackQuery):
    await add.add_clan_type(callback.from_user.id, 1)
    await clan_type_clan(callback)

@router.callback_query(F.data == 'open')
async def clan_type_open(callback: CallbackQuery):
    await add.add_clan_type(callback.from_user.id, 0)
    await clan_type_clan(callback)

@router.callback_query(F.data == 'type_back')
async def clan_type_back(callback: CallbackQuery):
    await clans(callback.message)


@router.callback_query(F.data == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞')
async def clan_change_clan_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞:')
    await state.set_state(Clan.name_again)

@router.callback_query(F.data == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∫–ª–∞–Ω–∞')
async def clan_change_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–ª–∞–Ω–∞:')
    await state.set_state(Clan.clan_photo)


@router.callback_query(F.data == '–£–ª—É—á—à–µ–Ω–∏—è')
async def clan_upgrades(callback: CallbackQuery):
    await callback.message.edit_caption('–í—ã –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π? –ù—É —Ç–æ–≥–¥–∞ –≤—ã –ø–æ –∞–¥—Ä–µ—Å—É!'
                                        '1. –†–£–õ–ï–¢–ö–ê: +9.75% –∫ —à–∞–Ω—Å–∞–º –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤ –Ω–∞ 12 —á–∞—Å–æ–≤, –Ω–æ —â–∞–Ω—Å –Ω–∞ —ç—Ç–æ —Ç–æ–ª—å–∫–æ 35%!\n–°–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –¥–æ –Ω—É–ª—è —Å —à–∞–Ω—Å–æ–º 65% –Ω–∞ 12 —á–∞—Å–æ–≤.'
                                        '2. –º–∏–Ω–∏-—à–∏—à–∫–∞: 3 –º–ª–Ω –ø–æ–¥–Ω—è—Ç–∏–µ —à–∞–Ω—Å–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è —à–∏—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤ –Ω–∞ 3% –Ω–∞ 8 —á–∞—Å–æ–≤.'
                                        '3. –º–∏–Ω–∏-–±—É—Å—Ç–∏–∫: –ó–∞ 5 –º–ª–Ω –ø–æ–¥–Ω—è—Ç–∏–µ —à–∞–Ω—Å–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤ –Ω–∞ 4% –Ω–∞ 8 —á–∞—Å–æ–≤.'
                                        '4. –ò–ü: –ó–∞ 7 –º–ª–Ω –ø–æ–¥–Ω—è—Ç–∏–µ —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–∞ 0.4% –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤.'
                                        '5. –ü–†–ï–î–ü–†–ò–ù–ò–ú–ê–¢–ï–õ–¨: –ó–∞ 15 –º–ª–Ω –ø–æ–¥–Ω—è—Ç–∏–µ —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–∞ 7% –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤.'
                                        '6. –ú–ê–ñ–û–†: –ó–∞ 50 –º–ª–Ω –ø–æ–¥–Ω—è—Ç–∏–µ —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–∞ 15% –Ω–∞–≤—Å–µ–≥–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤.',
                                        reply_markup=kb.clan_upgrades)
    # await callback.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)

@router.callback_query(F.data == '–†–£–õ–ï–¢–ö–ê')
async def clan_upgrades(callback: CallbackQuery):
    users = await get.get_clan_users(callback.from_user.id)
    money_chance, boost_chance = await get.get_clan_money_chance(callback.from_user.id), await get.get_clan_boost_chance(callback.from_user.id)
    if random.randint(0, 100) <= 35:
        await add.update_clan_money_chance(callback.from_user.id, 9.75)
        await add.update_clan_boost_chance(callback.from_user.id, 9.75)
        for user in users:
            await add.add_money_chance(user, 9.75)
            await add.add_boost_chance(user, 9.75)
        await callback.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –≤—ã–ø–∞–ª–æ +9.75% –∫–æ –≤—Å–µ–º —à–∞–Ω—Å–∞–º.', show_alert=True)
        await asyncio.sleep(60*60*12)
        await minus.minus_clan_money_chance(callback.from_user.id, 9.75)
        await minus.minus_clan_boost_chance(callback.from_user.id, 9.75)
        for user in users:
            await minus.minus_money_chance(user, 9.75)
            await minus.minus_boost_chance(user, 9.75)

    else:
        await add.update_clan_money_chance(callback.from_user.id, 0)
        await add.update_clan_boost_chance(callback.from_user.id, 0)
        for user in users:
            await minus.minus_money_chance(user, money_chance)
            await minus.minus_boost_chance(user, boost_chance)
        await callback.answer('–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è —Å–Ω–∏–∂–µ–Ω—ã –¥–æ 0...', show_alert=True)
        await asyncio.sleep(60*60*12)
        await add.update_clan_money_chance(callback.from_user.id, money_chance)
        await add.update_clan_boost_chance(callback.from_user.id, boost_chance)
        for user in users:
            await add.add_money_chance(user, money_chance)
            await add.add_boost_chance(user, boost_chance)

@router.callback_query(F.data == '–º–∏–Ω–∏-—à–∏—à–∫–∞')
async def clan_upgrades(callback: CallbackQuery):
    clan_money = await get.get_clan_money(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    if clan_money >= 3000000:
        await minus.minus_clan_money(callback.from_user.id, 3000000)
        await add.update_clan_money_chance(callback.from_user.id, 3)
        for user in users:
            await add.add_money_chance(user, 3)
        await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!', show_alert=True)
        await asyncio.sleep(60 * 60 * 8)
        await minus.minus_clan_money_chance(callback.from_user.id, 3)
        for user in users:
            await minus.minus_money_chance(user, 3)
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞', show_alert=True)

@router.callback_query(F.data == '–º–∏–Ω–∏-–±—É—Å—Ç–∏–∫')
async def clan_upgrades(callback: CallbackQuery):
    clan_money = await get.get_clan_money(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    if clan_money >= 5000000:
        await minus.minus_clan_money(callback.from_user.id, 5000000)
        await add.update_clan_boost_chance(callback.from_user.id, 4)
        for user in users:
            await add.add_boost_chance(user, 4)
        await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!', show_alert=True)
        await asyncio.sleep(60 * 60 * 8)
        await minus.minus_clan_boost_chance(callback.from_user.id, 4)
        for user in users:
            await minus.minus_boost_chance(user, 4)
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞', show_alert=True)


@router.callback_query(F.data == '–ò–ü')
async def clan_upgrades(callback: CallbackQuery):
    clan_money = await get.get_clan_money(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    if clan_money >= 7000000:
        await minus.minus_clan_money(callback.from_user.id, 7000000)
        await add.update_clan_money_chance(callback.from_user.id, 0.4)
        await add.update_clan_boost_chance(callback.from_user.id, 0.4)
        for user in users:
            await add.add_money_chance(user, 0.4)
            await add.add_boost_chance(user, 0.4)
        await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!', show_alert=True)
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞', show_alert=True)

@router.callback_query(F.data == '–ü–†–ï–î–ü–†–ò–ù–ò–ú–ê–¢–ï–õ–¨')
async def clan_upgrades(callback: CallbackQuery):
    clan_money = await get.get_clan_money(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    if clan_money >= 15000000:
        await minus.minus_clan_money(callback.from_user.id, 15000000)
        await add.update_clan_money_chance(callback.from_user.id, 7)
        await add.update_clan_boost_chance(callback.from_user.id, 7)
        for user in users:
            await add.add_money_chance(user, 7)
            await add.add_boost_chance(user, 7)
        await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!', show_alert=True)
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞', show_alert=True)

@router.callback_query(F.data == '–ú–ê–ñ–û–†')
async def clan_upgrades(callback: CallbackQuery):
    clan_money = await get.get_clan_money(callback.from_user.id)
    users = await get.get_clan_users(callback.from_user.id)
    if clan_money >= 50000000:
        await minus.minus_clan_money(callback.from_user.id, 50000000)
        await add.update_clan_money_chance(callback.from_user.id, 15)
        await add.update_clan_boost_chance(callback.from_user.id, 15)
        for user in users:
            await add.add_money_chance(user, 15)
            await add.add_boost_chance(user, 15)
        await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ!', show_alert=True)
    else:
        await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞', show_alert=True)

@router.callback_query(F.data == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É')
async def clan_bank_up(callback: CallbackQuery, state: FSMContext):
    agree = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='nope')
            ]
        ]
    )
    user_money = await get.get_money(callback.from_user.id)
    await callback.message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user_money}\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=agree)
    await state.set_state(Clan.money)


async def clan_kb(callback: CallbackQuery):
    all_clans = await get.get_clans()
    length = len(all_clans)
    if callback.data.startswith('–î–∞–ª–µ–µ_') or callback.data.startswith('–ù–∞–∑–∞–¥_'):
        if str(callback.data[:6]) == '–î–∞–ª–µ–µ_':
            i = int(callback.data[6:])
            i += 1
        else:
            i = int(callback.data[6:])
            i -= 1
    else:
        i = 1

    key = InlineKeyboardBuilder()
    if i == 1:
        for clan in all_clans[:8]:
            members = await get.get_members(clan)
            clans = key.add(InlineKeyboardButton(text=f'{clan} {members}/20', callback_data=f'name_{clan}'))
            clans.adjust(2)
        if length / i > 8:
            next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
            next.adjust(2)
    else:
        if i*8 >= length:
            for clan in all_clans[(i-1)*8:i*8]:
                members = await get.get_members(clan)
                clans = key.add(InlineKeyboardButton(text=f'{clan} {members}/20', callback_data=f'name_{clan}'))
                clans.adjust(2)
            if length / i > 8:
                next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
                next.adjust(2)
        elif i*8 <= length:
            if length < (i+1)*8:
                for clan in all_clans[(i-1)*8:length]:
                    members = await get.get_members(clan)
                    clans = key.add(InlineKeyboardButton(text=f'{clan} {members}/20', callback_data=f'name_{clan}'))
                    clans.adjust(2)
            for clan in all_clans[(i-1)*8:length-1]:
                members = await get.get_members(clan)
                clans = key.add(InlineKeyboardButton(text=f'{clan} {members}/20', callback_data=f'name_{clan}'))
                clans.adjust(2)
            if length / i > 8:
                next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'–î–∞–ª–µ–µ_{i}'))
                next.adjust(2)
        back = key.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'–ù–∞–∑–∞–¥_{i}'))
        back.adjust(2)
    if length == 0:
        await callback.answer('–û—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–∞–Ω–æ–≤ –Ω–µ—Ç—É.', show_alert=True)
        return None
    else:
        return clans.as_markup()


@router.callback_query(F.data == '–í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª–∞–Ω')
async def clan_open_clan(callback: CallbackQuery):
    if await clan_kb(callback) != None:
        await callback.message.edit_reply_markup(reply_markup=await clan_kb(callback))

@router.callback_query(F.data.startswith('name_'))
async def clan_open_clan(callback: CallbackQuery):
    Clan_add.name = str(callback.data.replace('name_', ''))
    yes = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data='–í—Å—Ç—É–ø–∏—Ç—å'),
                InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥')
            ]
        ]
    )
    clan_name = str(callback.data.replace('name_', ''))
    clan_owner_tg_id = await get.get_clan_owner_by_name(clan_name)
    type = await get.get_clan_type(clan_owner_tg_id)
    if type == 0:
        type = 'OPEN'
    else:
        type = 'PRIVATE'
    if await get.get_clan_photo(clan_owner_tg_id) == '':
        name = await get.get_clan_name(clan_owner_tg_id)
        money = await get.get_clan_money(clan_owner_tg_id)
        count = await get.get_clan_members(clan_owner_tg_id)
        users_money = await get.get_clan_users_money(clan_owner_tg_id)
        money_chance = await get.get_clan_money_chance(clan_owner_tg_id)
        boost_chance = await get.get_clan_boost_chance(clan_owner_tg_id)
        code = await get.get_clan_code(clan_owner_tg_id)
        await callback.message.answer_photo(
            photo='AgACAgIAAxkBAAJgPWaP6DS_Mee7DI9CGYUGd-RHHqY2AALP3jEbNceASMYNm_KYutUrAQADAgADeQADNQQ',
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                    f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                    f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                    f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n'
                    f'–¢–∏–ø –∫–ª–∞–Ω–∞ - {type}\n'
                    f'–ö–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {code}',
            reply_markup=yes)
    else:
        name = await get.get_clan_name(clan_owner_tg_id)
        photo = await get.get_clan_photo(clan_owner_tg_id)
        money = await get.get_clan_money(clan_owner_tg_id)
        count = await get.get_clan_members(clan_owner_tg_id)
        users_money = await get.get_clan_users_money(clan_owner_tg_id)
        money_chance = await get.get_clan_money_chance(clan_owner_tg_id)
        boost_chance = await get.get_clan_boost_chance(clan_owner_tg_id)
        code = await get.get_clan_code(clan_owner_tg_id)
        await callback.message.answer_photo(
            photo=f'{photo}',
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                    f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                    f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                    f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                    f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n'
                    f'–¢–∏–ø –∫–ª–∞–Ω–∞ - {type}\n'
                    f'–ö–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {code}',
            reply_markup=yes)


@router.callback_query(F.data == '–í—Å—Ç—É–ø–∏—Ç—å')
async def clan_private_clan(callback: CallbackQuery, bot: Bot):
    clan_name = Clan_add.name
    owner = await get.get_clan_owner_by_name(clan_name)
    name = await get.get_clan_name(owner)
    nickname = await get.get_user_nickname(callback.from_user.id)
    await set.set_user_clan(callback.from_user.id, int(f'892352{owner}'))
    await callback.message.answer(f'–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω {name}')
    await bot.send_message(owner, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –æ—Ç {nickname}')


@router.callback_query(F.data == '–í—Å—Ç—É–ø–∏—Ç—å –ø–æ –∫–æ–¥—É')
async def clan_private_clan(callback: CallbackQuery, state: FSMContext):
    break_input = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='break_code')
            ]
        ]
    )
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∞–Ω–∞:', reply_markup=break_input)
    await state.set_state(Clan.code)
    await asyncio.sleep(300)
    await state.clear()

@router.callback_query(F.data == 'break_code')
async def clan_private_clan(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥ –∫–æ–¥–∞')


@router.callback_query(F.data.startswith('–î–∞–ª–µ–µ_'))
async def clan_next(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await clan_kb(callback))

@router.callback_query(F.data.startswith('–ù–∞–∑–∞–¥_'))
async def clan_back(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await clan_kb(callback))


@router.callback_query(F.data.startswith('next_'))
async def clan_next(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await del_from_clan(callback))

@router.callback_query(F.data.startswith('back_'))
async def clan_back(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await del_from_clan(callback))


@router.callback_query(F.data == '–í—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞')
async def clan_delete(callback: CallbackQuery):
    agree = InlineKeyboardMarkup(
            inline_keyboard=[
            [
                InlineKeyboardButton(text='–î–∞', callback_data='–í—ã–π—Ç–∏'),
                InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å')
            ]
        ]
    )
    type = await get.get_clan_type(callback.from_user.id)
    if type == 0:
        type = 'OPEN'
    else:
        type = 'PRIVATE'
    name = await get.get_clan_name(callback.from_user.id)
    money = await get.get_clan_money(callback.from_user.id)
    count = await get.get_clan_members(callback.from_user.id)
    users_money = await get.get_clan_users_money(callback.from_user.id)
    money_chance = await get.get_clan_money_chance(callback.from_user.id)
    boost_chance = await get.get_clan_boost_chance(callback.from_user.id)
    await callback.message.edit_caption(
        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: {name}\n\n'
                f'–î–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ: {money}\n'
                f'–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n'
                f'–î–µ–Ω—å–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users_money}\n'
                f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {money_chance}\n'
                f'–î–æ–ø. —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤: {boost_chance}\n'
                f'–¢–∏–ø –∫–ª–∞–Ω–∞ - {type}\n\n'
                '–í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –ü–û–ö–ò–ù–£–¢–¨ –ö–õ–ê–ù??',
        reply_markup=agree)


@router.callback_query(F.data == '–í—ã–π—Ç–∏')
async def clan_delete(callback: CallbackQuery):
    name = await get.get_clan_name(callback.from_user.id)
    await minus.minus_clan_member(callback.from_user.id)
    await set.set_user_clan(callback.from_user.id, 0)

    await callback.message.answer(f'–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω {name}...')

@router.callback_query(F.data == '–ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å')
async def clan_delete(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await owner_main_kb(callback.from_user.id))


async def add_to_clan(callback: CallbackQuery):
    all_members = await get.get_clan_name_to_add_members(callback.from_user.id)
    length = len(all_members)
    if callback.data.startswith('add_next_') or callback.data.startswith('add_back_'):
        if str(callback.data[:9]) == 'add_next_':
            i = int(callback.data[9:])
            i += 1
        else:
            i = int(callback.data[9:])
            i -= 1
    else:
        i = 1
    key = InlineKeyboardBuilder()
    if i == 1:
        for member in all_members[:8]:
            clans = key.add(InlineKeyboardButton(text=f'{member}', callback_data=f'_add_{member}'))
            clans.adjust(2)
        if length / i > 8:
            next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'add_next_{i}'))
            next.adjust(2)
    else:
        if i * 8 >= length:
            for member in all_members[(i - 1) * 8:i * 8]:
                clans = key.add(InlineKeyboardButton(text=f'{member}', callback_data=f'_add_{member}'))
                clans.adjust(2)
            if length / i > 8:
                next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'add_next_{i}'))
                next.adjust(2)
        elif i * 8 <= length:
            if length < (i + 1) * 8:
                for member in all_members[(i - 1) * 8:length]:
                    clans = key.add(InlineKeyboardButton(text=f'{member}', callback_data=f'_add_{member}'))
                    clans.adjust(2)
            for member in all_members[(i - 1) * 8:length - 1]:
                clans = key.add(InlineKeyboardButton(text=f'{member}', callback_data=f'_add_{member}'))
                clans.adjust(2)
            if length / i > 8:
                next = key.add(InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data=f'add_next_{i}'))
                next.adjust(2)
        back = key.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'add_back_{i}'))
        back.adjust(2)
    if length == 0:
        await callback.answer('–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.', show_alert=True)
        return await owner_main_kb(callback.from_user.id)
    else:
        return clans.as_markup()


@router.callback_query(F.data == '–ó–∞—è–≤–∫–∏')
async def clan_delete(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await add_to_clan(callback))

@router.callback_query(F.data.startswith('_add'))
async def clan_add(callback: CallbackQuery):
    Clan_add.nickname_add = str(callback.data.replace('_add_', ''))
    add = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='–ü—Ä–∏–Ω—è—Ç—å'),
                InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data='–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
            ]
        ]
    )
    nickname = Clan_add.nickname_add
    user = await get.user_tg_id_by_nickname(nickname)
    money = await get.get_money(user)
    place = [0, 0, 0]
    a = 0
    b = 0
    c = 0
    top_alltime_money = await get.get_top_alltime_money()
    top_money = await get.get_top_money()
    top_referrals = await get.get_top_referrals()
    for item in top_alltime_money:
        a += 1
        if item == user:
            place[0] = a

    for item in top_money:
        b += 1
        if item == user:
            place[1] = b

    for item in top_referrals:
        c += 1
        if item == user:
            place[2] = c
    await callback.message.edit_caption(
        caption=f'–ò–≥—Ä–æ–∫ {nickname}\n\n'
                f'–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: <b>{money}</b> —à–∏—à–µ–∫ üå∞!\n\n'
                f'–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —à–∏—à–µ–∫ üå∞:<b>{await get.get_money_chance(user)}%</b>'
                f'\n–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ üîã:<b>{await get.get_boost_chance(user)}%</b>'
                f'\n\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[0]}</b> –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è! üí∏'
                f'\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[1]}</b> –ø–æ –¥–µ–Ω—å–≥–∞–º! üî•'
                f'\n–ò–≥—Ä–æ–∫ —Ç–æ–ø <b>{place[2]}</b> –ø–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üë®‚Äçüíº',
        reply_markup=add, parse_mode=ParseMode.HTML)

@router.callback_query(F.data.startswith('add_next_'))
async def clan_add_next(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await add_to_clan(callback))

@router.callback_query(F.data.startswith('add_back_'))
async def clan_add_back(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=await add_to_clan(callback))


@router.callback_query(F.data == '–ü—Ä–∏–Ω—è—Ç—å')
async def clan_type_clan(callback: CallbackQuery, bot: Bot):
    nickname = Clan_add.nickname_add
    user = await get.user_tg_id_by_nickname(nickname)
    name = await get.get_clan_name(callback.from_user.id)
    alltime_money = await get.get_alltime_money(callback.from_user.id)
    await add.update_clan_users_money(callback.from_user.id, alltime_money)
    await add.add_clan_member(callback.from_user.id)
    await set.set_user_clan(user, callback.from_user.id)

    await callback.answer(f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–ª–∞–Ω {nickname}!', show_alert=True)
    await bot.send_message(user, f'–í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–ª–∞–Ω {name}')


@router.callback_query(F.data == '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
async def clan_type_clan(callback: CallbackQuery, bot: Bot):
    nickname = Clan_add.nickname_add
    user = await get.user_tg_id_by_nickname(nickname)
    name = await get.get_clan_name(callback.from_user.id)
    await set.set_user_clan(user, 0)

    await callback.answer(f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω {nickname}!', show_alert=True)
    await bot.send_message(user, f'–í–∞—à—É –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω {name} –æ—Ç–∫–ª–æ–Ω–∏–ª–∏...')